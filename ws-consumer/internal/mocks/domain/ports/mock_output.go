// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/ports/output.go
//
// Generated by this command:
//
//	Cursor-0.47.9-x86_64.AppImage -source=internal/domain/ports/output.go -destination=internal/mocks/domain/ports/mock_output.go
//

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	entities "real-time-messaging/consumer/internal/domain/entities"
	events "real-time-messaging/consumer/internal/domain/events"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventBroker is a mock of EventBroker interface.
type MockEventBroker struct {
	ctrl     *gomock.Controller
	recorder *MockEventBrokerMockRecorder
	isgomock struct{}
}

// MockEventBrokerMockRecorder is the mock recorder for MockEventBroker.
type MockEventBrokerMockRecorder struct {
	mock *MockEventBroker
}

// NewMockEventBroker creates a new mock instance.
func NewMockEventBroker(ctrl *gomock.Controller) *MockEventBroker {
	mock := &MockEventBroker{ctrl: ctrl}
	mock.recorder = &MockEventBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBroker) EXPECT() *MockEventBrokerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockEventBroker) Publish(message events.BaseEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockEventBrokerMockRecorder) Publish(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBroker)(nil).Publish), message)
}

// MockMessageEventPublisher is a mock of MessageEventPublisher interface.
type MockMessageEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockMessageEventPublisherMockRecorder
	isgomock struct{}
}

// MockMessageEventPublisherMockRecorder is the mock recorder for MockMessageEventPublisher.
type MockMessageEventPublisherMockRecorder struct {
	mock *MockMessageEventPublisher
}

// NewMockMessageEventPublisher creates a new mock instance.
func NewMockMessageEventPublisher(ctrl *gomock.Controller) *MockMessageEventPublisher {
	mock := &MockMessageEventPublisher{ctrl: ctrl}
	mock.recorder = &MockMessageEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageEventPublisher) EXPECT() *MockMessageEventPublisherMockRecorder {
	return m.recorder
}

// PublishMessage mocks base method.
func (m *MockMessageEventPublisher) PublishMessage(ctx context.Context, message events.BaseEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMessage indicates an expected call of PublishMessage.
func (mr *MockMessageEventPublisherMockRecorder) PublishMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockMessageEventPublisher)(nil).PublishMessage), ctx, message)
}

// MockAuthentication is a mock of Authentication interface.
type MockAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationMockRecorder
	isgomock struct{}
}

// MockAuthenticationMockRecorder is the mock recorder for MockAuthentication.
type MockAuthenticationMockRecorder struct {
	mock *MockAuthentication
}

// NewMockAuthentication creates a new mock instance.
func NewMockAuthentication(ctrl *gomock.Controller) *MockAuthentication {
	mock := &MockAuthentication{ctrl: ctrl}
	mock.recorder = &MockAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthentication) EXPECT() *MockAuthenticationMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAuthentication) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAuthenticationMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAuthentication)(nil).Close))
}

// GenerateToken mocks base method.
func (m *MockAuthentication) GenerateToken(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthenticationMockRecorder) GenerateToken(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthentication)(nil).GenerateToken), ctx, email)
}

// ValidateToken mocks base method.
func (m *MockAuthentication) ValidateToken(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthenticationMockRecorder) ValidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthentication)(nil).ValidateToken), ctx, token)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}
