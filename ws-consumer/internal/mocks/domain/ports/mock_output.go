// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/ports/output.go
//
// Generated by this command:
//
//	Code -source=internal/domain/ports/output.go -destination=internal/mocks/domain/ports/mock_output.go
//

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	events "real-time-messaging/consumer/internal/domain/events"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventBroker is a mock of EventBroker interface.
type MockEventBroker struct {
	ctrl     *gomock.Controller
	recorder *MockEventBrokerMockRecorder
	isgomock struct{}
}

// MockEventBrokerMockRecorder is the mock recorder for MockEventBroker.
type MockEventBrokerMockRecorder struct {
	mock *MockEventBroker
}

// NewMockEventBroker creates a new mock instance.
func NewMockEventBroker(ctrl *gomock.Controller) *MockEventBroker {
	mock := &MockEventBroker{ctrl: ctrl}
	mock.recorder = &MockEventBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBroker) EXPECT() *MockEventBrokerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockEventBroker) Publish(message events.BaseEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockEventBrokerMockRecorder) Publish(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBroker)(nil).Publish), message)
}

// MockMessageEventPublisher is a mock of MessageEventPublisher interface.
type MockMessageEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockMessageEventPublisherMockRecorder
	isgomock struct{}
}

// MockMessageEventPublisherMockRecorder is the mock recorder for MockMessageEventPublisher.
type MockMessageEventPublisherMockRecorder struct {
	mock *MockMessageEventPublisher
}

// NewMockMessageEventPublisher creates a new mock instance.
func NewMockMessageEventPublisher(ctrl *gomock.Controller) *MockMessageEventPublisher {
	mock := &MockMessageEventPublisher{ctrl: ctrl}
	mock.recorder = &MockMessageEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageEventPublisher) EXPECT() *MockMessageEventPublisherMockRecorder {
	return m.recorder
}

// PublishMessage mocks base method.
func (m *MockMessageEventPublisher) PublishMessage(ctx context.Context, message events.BaseEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMessage indicates an expected call of PublishMessage.
func (mr *MockMessageEventPublisherMockRecorder) PublishMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockMessageEventPublisher)(nil).PublishMessage), ctx, message)
}
